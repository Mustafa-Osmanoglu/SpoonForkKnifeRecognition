import os
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import load_model
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import itertools

# Ayarlar
DATA_DIR   = "dataset"
MODEL_PATH = os.path.join("models", "best_model.h5")
BATCH_SIZE = 8
CLASSES    = ["spoon", "fork", "knife"]

# 1) Modeli yükle
model = load_model(MODEL_PATH)

# 2) Test veri generator
test_datagen = ImageDataGenerator(rescale=1./255)
test_gen = test_datagen.flow_from_directory(
    os.path.join(DATA_DIR, "test"),
    target_size=(224,224),
    batch_size=BATCH_SIZE,
    class_mode="categorical",
    shuffle=False
)

# 3) Test kaybı ve doğruluk
loss, acc = model.evaluate(test_gen, verbose=0)
print(f"\nTest Loss: {loss:.4f}")
print(f"Test Accuracy: {acc:.4f}\n")

# 4) Tahminler ve gerçek etiketler
y_pred_prob = model.predict(test_gen)
y_pred = np.argmax(y_pred_prob, axis=1)
y_true = test_gen.classes

# 5) Classification Report
print("Classification Report:")
print(classification_report(y_true, y_pred, target_names=CLASSES))

# 6) Confusion Matrix
cm = confusion_matrix(y_true, y_pred)
print("Confusion Matrix:")
print(cm)

# 7) Matris Görselleştirme
plt.figure(figsize=(6,5))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.colorbar()
tick_marks = np.arange(len(CLASSES))
plt.xticks(tick_marks, CLASSES, rotation=45)
plt.yticks(tick_marks, CLASSES)
thresh = cm.max() / 2
for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
    plt.text(j, i, cm[i, j],
             horizontalalignment="center",
             color="white" if cm[i, j] > thresh else "black")
plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.tight_layout()
plt.savefig("confusion_matrix.png")
plt.show()
