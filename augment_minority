import os, glob
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img, array_to_img

# --- 1. Ayarlar ---
TRAIN_DIR = 'dataset/train'
CLASSES = ['spoon', 'fork', 'knife']
# Augmentation için parametreler
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest'
)

# --- 2. Sınıflar arası dengeyi bul ---
class_counts = {}
for cls in CLASSES:
    path = os.path.join(TRAIN_DIR, cls)
    files = glob.glob(os.path.join(path, '*'))
    class_counts[cls] = len(files)
max_count = max(class_counts.values())
print('Current train counts:', class_counts)
print('Target count per class:', max_count)

# --- 3. Azınlık sınıfları için augmentasyon ---
for cls, count in class_counts.items():
    if count < max_count:
        need = max_count - count
        save_dir = os.path.join(TRAIN_DIR, cls)
        files = glob.glob(os.path.join(save_dir, '*'))
        idx = 0
        print(f'Augmenting class {cls}: need {need} images')
        # Rasgele seçimle orijinal dosyalardan
        while idx < need:
            img_path = np.random.choice(files)
            img = load_img(img_path)  # PIL image
            x = img_to_array(img)     # (H, W, 3)
            x = x.reshape((1,) + x.shape)
            # flow ile num_needed örnek oluştur
            for batch in datagen.flow(x, batch_size=1,
                                      save_to_dir=save_dir,
                                      save_prefix='aug',
                                      save_format='jpg'):
                idx += 1
                if idx >= need:
                    break
        print(f'Completed augmentation for {cls}')

print('Augmentation process completed.')
